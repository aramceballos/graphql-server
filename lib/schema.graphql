"Validate type of levels"
enum Level {
  easy
  medium
  advanced
}

type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String
  people: [Student]
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

type Query {
  "Returns all courses"
  courses: [Course]

  "Returns one course"
  course(id: ID!): Course

  "Returns all people"
  people: [Person]

  "Returns one person"
  person(id: ID!): Person
}

input CreateCourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
}

input EditCourseInput {
  title: String
  teacher: String
  description: String
  topic: String
}

input CreatePersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input EditPersonInput {
  name: String
  email: String
  password: String
  phone: String
  avatar: String
}

type Mutation {
  "Creates a new course"
  createCourse(input: CreateCourseInput!): Course

  "Edits a course"
  editCourse(id: ID!, input: EditCourseInput!): Course

  "Deletes a course"
  deleteCourse(id: ID!): ID

  "Creates a new person"
  createPerson(input: CreatePersonInput!): Person

  "Edits a person"
  editPerson(input: EditPersonInput!): Person

  "Add a person to a course"
  addToCourse(courseID: ID!, personID: ID!): Course

  "Deletes a person"
  deletePerson(id: ID!): ID
}
